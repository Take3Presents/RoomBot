#!/usr/bin/env bash
set -e

SCRIPTDIR=$( cd "${0%/*}" && pwd)
ROOTDIR="${SCRIPTDIR%/*}"

PUBLIC_DIR=""
PRIVATE_DIR="With Smoking Icons"
NUGGET_DIR="Golden Nugget Floor Maps"

LAYOUTS_DIR="${ROOTDIR}/frontend/public/layouts"
CACHE_DIR="${HOME}/.cache/roombot/floorplans"

problems() {
    2>&1 echo "Error: $*"
    exit 1
}

# return 0 if file is a PNG (checks magic header), 1 otherwise
is_png() {
    # PNG magic: 89 50 4E 47 0D 0A 1A 0A
    # read first 8 bytes and compare in lowercase hex
    local sig
    if [ ! -f "$1" ]; then
        return 1
    fi
    sig=$(head -c 8 -- "$1" | od -An -tx1 | tr -d ' \n') || return 1
    [ "$sig" = "89504e470d0a1a0a" ]
}

# return 0 if file is a PDF (checks magic header), 1 otherwise
is_pdf() {
    # PDF magic: 25 50 44 46 (%PDF)
    # read first 4 bytes and compare
    local sig
    if [ ! -f "$1" ]; then
        return 1
    fi
    sig=$(head -c 4 -- "$1" | od -An -tx1 | tr -d ' \n') || return 1
    [ "$sig" = "25504446" ]
}

ordinal_suffix() {
    local n=$1
    local mod100=$(( n % 100 ))
    local mod10=$(( n % 10 ))
    if [ $mod100 -ge 11 ] && [ $mod100 -le 13 ]; then
        echo "th"
        return
    fi
    case $mod10 in
        1) echo "st" ;;
        2) echo "nd" ;;
        3) echo "rd" ;;
        *) echo "th" ;;
    esac
}

SRC_OVERRIDE_DIR=""
SKIP_FETCH=""
# Parse arguments: [-b|--base NAME] [IMAGES_DIR]
while [ $# -gt 0 ] ; do
    case "$1" in
	-s|--skip)
	    SKIP_FETCH="ayy"
	    shift
	    ;;
        *)
            if [ -z "$SRC_OVERRIDE_DIR" ] && [ -d "$1" ] ; then
                SRC_OVERRIDE_DIR="$1"
                shift
            else
                problems "Unknown argument or not a directory: $1"
            fi
            ;;
    esac
done

if [ ! -d "$CACHE_DIR" ] ; then
    mkdir -p "${CACHE_DIR}/ballys"
    mkdir -p "${CACHE_DIR}/nugget"
fi

BALLYS_FOLDER="$("${SCRIPTDIR}/secrets" show staging FLOORPLANS_BALLYS_FOLDER 2> /dev/null || true)"
NUGGET_FOLDER="$("${SCRIPTDIR}/secrets" show staging FLOORPLANS_NUGGET_FOLDER 2> /dev/null || true)"
if [ -z "$BALLYS_FOLDER" ] || [ -z "$NUGGET_FOLDER" ] ; then
    problems "unable to extract folder ids from staging secrets"
fi

if [ -z "$SKIP_FETCH" ] ; then
    if [ -n "$SRC_OVERRIDE_DIR" ] ; then
	echo "Using images from ${SRC_OVERRIDE_DIR}"
	cp -vr "${SRC_OVERRIDE_DIR}/"* "$CACHE_DIR" || problems "Failed to copy from ${SRC_OVERRIDE_DIR}"
    else
	"${ROOTDIR}/backend/.venv/bin/gdown" -cO "${CACHE_DIR}/ballys" --folder "$BALLYS_FOLDER"
	"${ROOTDIR}/backend/.venv/bin/gdown" -cO "${CACHE_DIR}/nugget" --folder "$NUGGET_FOLDER"
	if [ "$(ls -1 "$CACHE_DIR" | wc -l)" = 0 ] ; then
	    problems "Nothing downloaded??"
	fi
    fi
else
    echo "Skipping fetch, this will go poorly if you do not have cached images"
fi

if [ -d "$LAYOUTS_DIR" ] ; then
    rm -rf "$LAYOUTS_DIR"
fi
if [ ! -d "$LAYOUTS_DIR" ] ; then
    mkdir -p "$LAYOUTS_DIR"
fi

for image in "${CACHE_DIR}/ballys/${PUBLIC_DIR}"/* ; do
    [ -f "$image" ] || continue
    if ! is_png "$image" ; then
        continue
    fi
    SRCFILE="$(basename "$image")"
    floor_num=""
    if [[ "$SRCFILE" =~ ^([0-9]+)[[:space:]]*[Ff][Ll][Oo][Oo][Rr] ]]; then
        floor_num="${BASH_REMATCH[1]}"
    else
        continue
    fi
    # convert to integer (strip leading zeros)
    floor_num=$((10#$floor_num))
    suf=$(ordinal_suffix "$floor_num")
    DESTFILE="ballys_${floor_num}${suf}.png"
    THUMBFILE="ballys_${floor_num}${suf}_thumb.png"
    if [ ! -e "${LAYOUTS_DIR}/${DESTFILE}" ] ; then
	cp "$image" "${LAYOUTS_DIR}/${DESTFILE}"
	echo "Fetched ${SRCFILE} as ${DESTFILE}"
    else
	echo "Skipped ${DESTFILE}"
    fi
    if [ ! -e "${LAYOUTS_DIR}/${THUMBFILE}" ] ; then
	convert "$image" -format png -thumbnail 35x30 "${LAYOUTS_DIR}/${THUMBFILE}"
	echo "Generated thumbnail ${THUMBFILE}"
    else
	echo "Skipped ${DESTFILE} thumbnail"
    fi
done

for image in "${CACHE_DIR}/ballys/${PRIVATE_DIR}"/* ; do
    [ -f "$image" ] || continue
    if ! is_png "$image" ; then
        continue
    fi
    SRCFILE="$(basename "$image")"
    floor_num=""
    if [[ "$SRCFILE" =~ -[[:space:]]*([0-9]+)(\.[^.]*)?$ ]]; then
        floor_num="${BASH_REMATCH[1]}"
    else
        continue
    fi
    floor_num=$((10#$floor_num))
    suf=$(ordinal_suffix "$floor_num")
    DESTFILE="ballys_${floor_num}${suf}.png"
    THUMBFILE="ballys_${floor_num}${suf}_thumb.png"
    if [ ! -e "${LAYOUTS_DIR}/${DESTFILE}" ] ; then
	cp "$image" "${LAYOUTS_DIR}/${DESTFILE}"
	echo "Fetched ${PRIVATE_DIR}/${SRCFILE} as ${DESTFILE}"
    else
	echo "Skipped ${DESTFILE}"
    fi
    if [ ! -e "${LAYOUTS_DIR}/${THUMBFILE}" ] ; then
	convert "$image" -format png -thumbnail 35x30 "${LAYOUTS_DIR}/${THUMBFILE}"
	echo "Generated thumbnail ${THUMBFILE}"
	echo "Skipped ${DESTFILE} thumbnail"
    fi
done

for image in "${CACHE_DIR}/nugget"/* ; do
    [ -f "$image" ] || continue

    # Check if file is PDF and convert to PNG
    png_path="${image%.*}.png"
    if [ ! -e "$png_path" ] && is_pdf "$image" ; then
        echo "Converting PDF $(basename "$image") to PNG..."
        pdf_path="$image"
        png_path="${image%.*}.png"
        convert -density 300 "$pdf_path" -quality 100 "$png_path" || {
            echo "Failed to convert $(basename "$image")"
            continue
        }
        image="$png_path"
    fi

    if ! is_png "$image" ; then
        continue
    fi
    SRCFILE="$(basename "$image")"
    floor_num=""
    if [[ "$SRCFILE" =~ ^([0-9]+)[[:space:]]*[Ff][Ll][Oo][Oo][Rr] ]]; then
        floor_num="${BASH_REMATCH[1]}"
    else
        continue
    fi
    floor_num=$((10#$floor_num))
    suf=$(ordinal_suffix "$floor_num")
    DESTFILE="nugget_${floor_num}${suf}.png"
    THUMBFILE="nugget_${floor_num}${suf}_thumb.png"
    if [ ! -e "${LAYOUTS_DIR}/${DESTFILE}" ] ; then
	cp "$image" "${LAYOUTS_DIR}/${DESTFILE}"
	echo "Fetched ${PRIVATE_DIR}/${SRCFILE} as ${DESTFILE}"
    else
	echo "Skipped ${DESTFILE}"
    fi
    if [ ! -e "${LAYOUTS_DIR}/${THUMBFILE}" ] ; then
	convert "$image" -format png -thumbnail 35x30 "${LAYOUTS_DIR}/${THUMBFILE}"
	echo "Generated thumbnail ${THUMBFILE}"
	echo "Skipped ${DESTFILE} thumbnail"
    fi
done

